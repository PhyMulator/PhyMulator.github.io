<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Direction of attractive forces in 2d.</title>
    <link rel="stylesheet"  type="text/css" href="ejss.css" />
    <script src="common_script.js"></script>
    <script src="textresizedetector.js"></script>
    <script src="ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
function onemore(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = EJSS_CORE.Tools;
  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var x1; // EjsS Model.Variables.Var Table.x1
  var y1; // EjsS Model.Variables.Var Table.y1
  var x2; // EjsS Model.Variables.Var Table.x2
  var y2; // EjsS Model.Variables.Var Table.y2
  var dx1; // EjsS Model.Variables.Var Table.dx1
  var dy1; // EjsS Model.Variables.Var Table.dy1
  var dx2; // EjsS Model.Variables.Var Table.dx2
  var dy2; // EjsS Model.Variables.Var Table.dy2
  var R; // EjsS Model.Variables.Var Table.R

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      x1 : x1,
      y1 : y1,
      x2 : x2,
      y2 : y2,
      dx1 : dx1,
      dy1 : dy1,
      dx2 : dx2,
      dy2 : dy2,
      R : R
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.dx1 != "undefined") dx1 = json.dx1;
    if(typeof json.dy1 != "undefined") dy1 = json.dy1;
    if(typeof json.dx2 != "undefined") dx2 = json.dx2;
    if(typeof json.dy2 != "undefined") dy2 = json.dy2;
    if(typeof json.R != "undefined") R = json.R;
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model.addToReset(function() {
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["FixRel Page 2"] = true;
  });

  _model.addToReset(function() {
    x1 = 0; // EjsS Model.Variables.Var Table.x1
    y1 = 0; // EjsS Model.Variables.Var Table.y1
    x2 = 0; // EjsS Model.Variables.Var Table.x2
    y2 = 0; // EjsS Model.Variables.Var Table.y2
    dx1 = 0; // EjsS Model.Variables.Var Table.dx1
    dy1 = 0; // EjsS Model.Variables.Var Table.dy1
    dx2 = 0; // EjsS Model.Variables.Var Table.dx2
    dy2 = 0; // EjsS Model.Variables.Var Table.dy2
    R = 0; // EjsS Model.Variables.Var Table.R
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    dx1=(x2-x1)*0.2/Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));  // > FixedRelations.FixRel Page:1
    dy1=(y2-y1)*0.2/Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));  // > FixedRelations.FixRel Page:2
    dx2=(x1-x2)*0.2/Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));  // > FixedRelations.FixRel Page:3
    dy2=(y1-y2)*0.2/Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));  // > FixedRelations.FixRel Page:4
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page 2"]) return;
    R=Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));  // > FixedRelations.FixRel Page 2:1
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : null, height : null };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new onemore_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.m2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'm2'
          _view.m2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'm2'
          _view.m1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'm1'
          _view.m1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'm1'
          _view.dir_of_m2.linkProperty("SizeX",  function() { return dx1/R; } ); // HtmlView Page linking property 'SizeX' for element 'dir_of_m2'
          _view.dir_of_m2.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'dir_of_m2'
          _view.dir_of_m2.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'dir_of_m2'
          _view.dir_of_m2.linkProperty("SizeY",  function() { return dy1/R; } ); // HtmlView Page linking property 'SizeY' for element 'dir_of_m2'
          _view.dirof_m1.linkProperty("SizeX",  function() { return dx2/R; } ); // HtmlView Page linking property 'SizeX' for element 'dirof_m1'
          _view.dirof_m1.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'dirof_m1'
          _view.dirof_m1.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'dirof_m1'
          _view.dirof_m1.linkProperty("SizeY",  function() { return dy2/R; } ); // HtmlView Page linking property 'SizeY' for element 'dirof_m1'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function onemore_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = onemore_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function onemore_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singleDrawingPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawingPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>direction of attractive forces </h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'separator'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height",400) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"m2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'm2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'm2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"m1", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'm1'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'm1'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"dir_of_m2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dir_of_m2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"dirof_m1", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dirof_m1'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator2", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'separator2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Tap_and_slide_on_the_particle_to_change_its_position", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Tap_and_slide_on_the_particle_to_change_its_position'
      .setProperty("Text","Tap_and_slide_on_the_particle_to_change_its_position") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Tap_and_slide_on_the_particle_to_change_its_position'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
  <hr />
	  <a href= "index.html"><img src="back.png" width="120" height="50" /></a>
<hr /> 
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Direction of attractive forces in 2d.<br />
      </p>
      <p>
      <img alt="author image" src="Untitled.png" />
 Author name; PhyMulator
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2021, Author name; PhyMulator. Compiled with EJS 6.1 BETA (201115)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new onemore("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
